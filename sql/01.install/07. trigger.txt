
CREATE OR REPLACE FUNCTION public.insert_mpoint()
  RETURNS trigger AS
$BODY$
DECLARE    
    segtable_oid        text;
    segcolumn_name        text;
    sequence_name        text;
    moid            text;
    
    sql_text        text;
    records            record;
    
 BEGIN    
    sql_text := 'select f_segtableoid, f_mpoint_column, f_sequence_name from mpoint_columns where f_table_name = ' || quote_literal(TG_RELNAME);
    execute sql_text into records;
    
    segtable_oid := records.f_segtableoid;
    segcolumn_name := records.f_mpoint_column;
    sequence_name := records.f_sequence_name;

    sql_text := 'select nextval(' || quote_literal(sequence_name) || ')';
        
    execute sql_text into moid;

    
    RAISE NOTICE 'sql_text : %', sql_text;
    RAISE NOTICE 'segtable_oid : %', segtable_oid;
    RAISE NOTICE 'segcolumn_name : %', segcolumn_name;
    RAISE NOTICE 'sequence_name : %', sequence_name;
    RAISE NOTICE 'moid : %', moid;
    
    NEW.mpoint = (moid);    
        
    return NEW;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.insert_mpoint()
  OWNER TO postgres;



CREATE or replace FUNCTION public.delete_mpoint()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
DECLARE        
    delete_mpoint        mpoint;
    delete_id        integer;
    
    records            record;
    delete_record        record;
    
    BEGIN
    execute 'select f_mpoint_segtable_name, f_mpoint_column from mpoint_columns where f_table_name = ' || quote_literal(TG_RELNAME)
    into records;

    delete_record := OLD;

    /*
    execute 'select ' || column_name || ' from ' || delete_record
    into delete_trajectory;
    */
    
    delete_mpoint := OLD.mpoint;
    delete_id := delete_mpoint.id;
    
    execute 'DELETE FROM ' || quote_ident(records.f_mpoint_segtable_name) || ' WHERE mpid = ' || delete_id;

    return NULL;

    END;
$BODY$;

ALTER FUNCTION public.delete_mpoint()
    OWNER TO postgres;





























CREATE OR REPLACE FUNCTION public.insert_mdouble()
  RETURNS trigger AS
$BODY$
DECLARE    
    segtable_oid        text;
    segcolumn_name        text;
    sequence_name        text;
    moid            text;
    
    sql_text        text;
    records            record;
    
 BEGIN    
    sql_text := 'select f_segtableoid, f_mpoint_column, f_sequence_name from mpoint_columns where f_table_name = ' || quote_literal(TG_RELNAME);
    execute sql_text into records;
    
    segtable_oid := records.f_segtableoid;
    segcolumn_name := records.f_mpoint_column;
    sequence_name := records.f_sequence_name;

    sql_text := 'select nextval(' || quote_literal(sequence_name) || ')';
        
    execute sql_text into moid;

    
    RAISE NOTICE 'sql_text : %', sql_text;
    RAISE NOTICE 'segtable_oid : %', segtable_oid;
    RAISE NOTICE 'segcolumn_name : %', segcolumn_name;
    RAISE NOTICE 'sequence_name : %', sequence_name;
    RAISE NOTICE 'moid : %', moid;
    
    NEW.mdouble = (moid);    
        
    return NEW;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.insert_mdouble()
  OWNER TO postgres;



CREATE or replace FUNCTION public.delete_mdouble()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
DECLARE        
    delete_mpoint        mdouble;
    delete_id        integer;
    
    records            record;
    delete_record        record;
    
    BEGIN
    execute 'select f_mpoint_segtable_name, f_mpoint_column from mpoint_columns where f_table_name = ' || quote_literal(TG_RELNAME)
    into records;
	RAISE INFO '%', records;
	
    delete_record := OLD;
    delete_mpoint := OLD.mdouble;
    delete_id := delete_mpoint.id;
    
    execute 'DELETE FROM ' || quote_ident(records.f_mpoint_segtable_name) || ' WHERE mpid = ' || delete_id
	into records;
	RAISE INFO '%', records;
    return NULL;

    END;
$BODY$;

ALTER FUNCTION public.delete_mdouble()
    OWNER TO postgres;
	
	
	
	
	
	
	
	
	
	
	
	